integer a.
boolean bool.

void testIfStmt[] [
    if (TRUE) {
        disp <- "Inside if statement. GOOD!\n".
    }

    if (FALSE) {
        disp <- "BAD!".
    }

    if (TRUE) {
        disp <- "Inside if-else statement. GOOD!\n".
    } else {
        disp <- "BAD!".
    }

    if (FALSE) {
        disp <- "BAD!".
    } else {
        disp <- "Inside other if-else statement. GOOD!\n".
    }
    return.
]

void testInput[] [
    integer testIn.
    disp <- "PICK A NUMBER...\n".
    input -> testIn.
    disp <- "YOU WROTE THE NUMBER ".
    disp <- testIn.
    disp <- "\n".
    return.
]

void testArguments[integer int1, boolean bool, integer int2] [
    disp <- "Testing arguments...\n".
    if (int1 == 15) {
        disp <- "1st argument... GOOD!\n".
    } else {
        disp <- "1st argument... BAD!\n".
        disp <- "Got ".
        disp <- int1.
        disp <- " expected 15\n".
    }
    if (bool == TRUE) {
        disp <- "2nd argument... GOOD!\n".
    } else {
        disp <- "2nd argument... BAD!\n".
        disp <- "Got ".
        disp <- bool.
        disp <- " expected TRUE\n".
    }
    if (int2 == 12) {
        disp <- "3rd argument... GOOD!\n".
    } else {
        disp <- "3rd argument... BAD!\n".
        disp <- "Got ".
        disp <- int2.
        disp <- " expected 12\n".
    }
]

void testIncDec[] [
    integer myInt.
    disp <- "Testing increment and decrement statements...\n".
    myInt = 10.
    myInt++.
    if (myInt == 11) {
        disp <- "Increment: PASSED\n".
    } else {
        disp <- "Increment: FAILED\n".
    }

    myInt = 50.
    myInt--.
    if (myInt == 49) {
        disp <- "Decrement: PASSED\n".
    } else {
        disp <- "Decrement: FAILED\n".
    }
]

void testBinaryOps[] [
    # Plus node
    if (5 + 10 == 15) {
        disp <- "Plus Node: PASSED\n".
    } else {
        disp <- "Plus Node: FAILED\n".
    }

    # Minus node
    if (5 - 10 == -5) {
        disp <- "Minus Node: PASSED\n".
    } else {
        disp <- "Minus Node: FAILED\n".
    }

    # Times node
    if (5 * 10 == 50) {
        disp <- "Times Node: PASSED\n".
    } else {
        disp <- "Times Node: FAILED\n".
    }

    # Divide node
    if (10 / 5 == 2) {
        disp <- "Divide Node: PASSED\n".
    } else {
        disp <- "Divide Node: FAILED\n".
    }
    if (5 / 2 == 2) {
        disp <- "Divide Node (Integer Division): PASSED\n".
    } else {
        disp <- "Divide Node (Integer Division): FAILED\n".
    }

    # Equals node
    if (5 == 5) {
        disp <- "Equals Node: PASSED\n".
    } else {
        disp <- "Equals Node: FAILED\n".
    }

    # Not equal node
    if (5 ^= 6) {
        disp <- "Not Equals Node: PASSED\n".
    } else {
        disp <- "Not Equals Node: FAILED\n".
    }

    # Greater node
    if (5 > 1) {
        disp <- "Greater Node: PASSED\n".
    } else {
        disp <- "Greater Node: FAILED\n".
    }

    # Greater node
    if (5 >= 1) {
        disp <- "Greater Equal Node (Greater): PASSED\n".
    } else {
        disp <- "Greater Equal Node (Greater): FAILED\n".
    }
    if (5 >= 5) {
        disp <- "Greater Equal Node (Equal): PASSED\n".
    } else {
        disp <- "Greater Equal Node (Equal): FAILED\n".
    }

    # Less node
    if (1 < 5) {
        disp <- "Less Node: PASSED\n".
    } else {
        disp <- "Less Node: FAILED\n".
    }

    # Less equal node
    if (1 <= 5) {
        disp <- "Less Equal Node (Less): PASSED\n".
    } else {
        disp <- "Less Equal Node (Less): FAILED\n".
    }
    if (5 <= 5) {
        disp <- "Less Equal Node (Equal): PASSED\n".
    } else {
        disp <- "Less Equal Node (Equal): FAILED\n".
    }
    return.

    # AND node
    if(TRUE && TRUE){
        disp <- "And Node : PASSED\n".
    } else {
        disp <- "And Node : FAILED\n".
    }
    if(FALSE && TRUE){
        disp <- "And Node : FAILED\n".
    } else {
        disp <- "And Node : PASSED\n".
    }
    if(TRUE && FALSE){
        disp <- "And Node : FAILED\n".
    } else {
        disp <- "And Node : PASSED\n".
    }

    # Or node
    if(TRUE | FALSE){
        disp <- "Or Node : PASSED\n".
    } else {
        disp <- "Or Node : FAILED\n".
    }
    if(FALSE | TRUE){
        disp <- "Or Node : PASSED\n".
    } else {
        disp <- "Or Node : FAILED\n".
    }
    if(FALSE | FALSE){
        disp <- "Or Node : FAILED\n".
    } else {
        disp <- "Or Node : PASSED\n".
    }
]

integer testReturn[][
    return 5.
]

void main[] [
    #testIfStmt().
    #testInput().
    #testArguments(15, TRUE, 12).
    #testIncDec().
    #testReturn().
    testBinaryOps().
]